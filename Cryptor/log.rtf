{\rtf1\ansi\ansicpg932\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red0\green0\blue0;
\red57\green0\blue160;\red15\green104\blue160;\red196\green26\blue22;\red11\green79\blue121;}
{\*\expandedcolortbl;;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c4314\c30980\c47451;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 extension
\f1\b0 \cf4  \cf5 Site\cf4  \{\
    
\f0\b \cf2 override
\f1\b0 \cf4  
\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 func
\f1\b0 \cf4  \cf6 awakeFromInsert\cf4 () \{\
        
\f0\b \cf2 self
\f1\b0 \cf4 .setPrimitiveValue(Date(), forKey: \cf7 "createdAt"\cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .setPrimitiveValue(UUID().uuidString, forKey: \cf7 "uuid"\cf4 )\
        
\f0\b \cf2 self
\f1\b0 \cf4 .setPrimitiveValue(
\f0\b \cf2 true
\f1\b0 \cf4 , forKey: \cf7 "active"\cf4 )\
    \}\
\
    
\f0\b \cf2 public
\f1\b0 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 currentPassword\cf4 : \cf5 Password\cf4 ? \{\
        
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 self
\f1\b0 \cf4 .passwords?.first \{ ($0 
\f0\b \cf2 as
\f1\b0 \cf4 ! \cf5 Password\cf4 ).current\} 
\f0\b \cf2 as
\f1\b0 \cf4 ? \cf5 Password\cf4 \
    \}\
\}\
\

\f0\b \cf2 extension
\f1\b0 \cf4  \cf5 Site\cf4  \{\
    
\f0\b \cf2 convenience
\f1\b0 \cf4  
\f0\b \cf2 init
\f1\b0 \cf4 <\cf8 Key\cf4 , \cf8 Value\cf4 >(from properties: [\cf5 Key\cf4 : \cf5 value\cf4 ], context: \cf5 NSManagedObjectContext\cf4 )\
    
\f0\b \cf2 where
\f1\b0 \cf4  \cf5 Key\cf4 : \cf5 Hashable\cf4 \
    \{\
        
\f0\b \cf2 super
\f1\b0 \cf4 .init(context: context)\
        
\f0\b \cf2 let
\f1\b0 \cf4  dateFormatter = ISO8601DateFormatter()\
        
\f0\b \cf2 let
\f1\b0 \cf4  names = Site.entity().properties.map \{ $0.name \}\
        names.forEach \{ name 
\f0\b \cf2 in
\f1\b0 \cf4 \
            
\f0\b \cf2 if
\f1\b0 \cf4  
\f0\b \cf2 let
\f1\b0 \cf4  val = properties[name] \{\
                
\f0\b \cf2 switch
\f1\b0 \cf4  Site.entity().attributesByName[name]?.attributeType \{\
                
\f0\b \cf2 case
\f1\b0 \cf4  .booleanAttributeType:\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .setValue(Bool(val), forKey: name)\
                
\f0\b \cf2 case
\f1\b0 \cf4  .integer16AttributeType, .integer32AttributeType, .integer64AttributeType:\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .setValue(Int(val), forKey: name)\
                
\f0\b \cf2 case
\f1\b0 \cf4  .dateAttributeType:\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .setValue(dateFormatter.date(from: val), forKey: name)\
                
\f0\b \cf2 case
\f1\b0 \cf4  .stringAttributeType:\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .setValue(String(val), forKey: name)\
                
\f0\b \cf2 default
\f1\b0 \cf4 :\
                    
\f0\b \cf2 self
\f1\b0 \cf4 .setValue(
\f0\b \cf2 nil
\f1\b0 \cf4 , forKey: name)\
                \}\
            \}\
        \}\
    \}\
\}\
}